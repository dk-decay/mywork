/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.biogen.ecosystem.admin.view;

import java.awt.CardLayout;
import java.awt.Component;
import java.util.Date;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.biogen.business.chem.model.Compound;
import org.biogen.business.common.Status;
import org.biogen.business.enterprise.model.BusinessUnitType;
import org.biogen.business.enterprise.model.MedicareBusiness;
import org.biogen.business.medicare.model.ClinicalPatient;
import org.biogen.business.medicare.model.ClinicalState;
import org.biogen.business.medicare.model.ClinicalStudy;
import org.biogen.business.medicare.model.ClinicalStudyDirectory;
import org.biogen.business.medicare.model.ClinicalTrial;
import org.biogen.business.medicare.model.TrialPhaseType;
import org.biogen.business.medicare.model.TrialType;
import org.biogen.ecosystem.model.Ecosystem;
import org.biogen.ecosystem.model.Organization;
import org.biogen.network.model.OperationalRegion;
import org.biogen.organization.model.Hospital;
import org.biogen.organization.work.model.WorkRequest;
import org.biogen.organization.work.model.WorkRequestStatus;
import org.biogen.user.model.BusinessUser;
import org.biogen.user.model.BusinessUserRole;
import org.biogen.user.model.RoleType;
import org.biogen.user.model.UserType;
import org.biogen.work.attachment.model.AttachmentType;
import org.biogen.work.attachment.model.ClinicalStudyAttachment;

/**
 *
 * @author deveshkandpal
 */
public class ManageClinicalTrialPanel extends javax.swing.JPanel {

    /**
     * Creates new form ManageClinicalTrialPanel
     */
    private JPanel container;
    private Ecosystem system;
    private BusinessUser user;

    public ManageClinicalTrialPanel(JPanel container, Ecosystem system, BusinessUser user) {
        initComponents();
        this.container = container;
        this.system = system;
        this.user = user;
        populateNewClinicalStudy();
        populateExistingClinicalStudy();
    }

    public void populateNewClinicalStudy() {
        DefaultTableModel model = (DefaultTableModel) newClinicalTrialTable.getModel();

        model.setRowCount(0);
        this.system.getDiseaseStudyDirectory().getDiseaseList().stream()
                .map(s -> s.getClinicalStudyDirectory().getClinicalStudyList())
                .flatMap(l -> l.stream())
                .filter(st -> st.getState() == ClinicalState.NEW)
                .forEach(c -> {
                    Object[] row = new Object[3];
                    row[0] = c;
                    row[1] = c.getDrug().getDisease();
                    row[2] = c.getDrug();
                    model.addRow(row);
                });

    }

    public void populateExistingClinicalStudy() {

        DefaultTableModel model = (DefaultTableModel) existingStudyTable.getModel();
        model.setRowCount(0);

//        List<WorkRequest> workRequestList = this.system.getOrganizationDirectory()
//                .getOrganizationList()
//                .stream()
//                .filter(o -> o.getBuType() == BusinessUnitType.MEDICARE)
//                .map(m -> (Hospital)m)
//                .map(wq -> wq.getUserList())
//                .flatMap(fm -> fm.stream())
//                .filter( u -> u.getType() == UserType.BU)
//                .map(bu -> (BusinessUser)bu)
//                .filter(f1 -> f1.getRole().getType() == RoleType.ORG_ADMIN)
//                .map( ua -> ua.getWorkQueue().getWorkRequestList())
//                .flatMap(wrl -> wrl.stream())
//                .filter(req -> req.getAttachment().getAttachmentType() == AttachmentType.ClinicalStudyAttachment)
//                .collect(Collectors.toList());
//        
        this.system.getDiseaseStudyDirectory().getDiseaseList().stream()
                .map(s -> s.getClinicalStudyDirectory().getClinicalStudyList())
                .flatMap(l -> l.stream())
                .filter(st -> st.getState() != ClinicalState.NEW)
                .forEach(c -> {
                    Object[] row = new Object[4];
                    row[0] = c;
                    row[1] = c.getDrug().getDisease();
                    row[2] = c.getDrug();
                    row[3] = c.getState();
                    model.addRow(row);
                });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        newClinicalTrialTable = new javax.swing.JTable();
        createNewBtn = new javax.swing.JButton();
        editBtn = new javax.swing.JButton();
        deleteBtn = new javax.swing.JButton();
        sendInvitationBtn = new javax.swing.JButton();
        jScrollPane2 = new javax.swing.JScrollPane();
        existingStudyTable = new javax.swing.JTable();
        backBtn = new javax.swing.JButton();
        viewBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Manage Clinical Trials");

        newClinicalTrialTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trial Name", "Disease", "Drug"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(newClinicalTrialTable);

        createNewBtn.setText("Create New");
        createNewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                createNewBtnActionPerformed(evt);
            }
        });

        editBtn.setText("Edit");
        editBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                editBtnActionPerformed(evt);
            }
        });

        deleteBtn.setText("Delete");
        deleteBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                deleteBtnActionPerformed(evt);
            }
        });

        sendInvitationBtn.setText("Send Invitation");
        sendInvitationBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sendInvitationBtnActionPerformed(evt);
            }
        });

        existingStudyTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Study Name", "Disease", "Drug", "Status"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane2.setViewportView(existingStudyTable);

        backBtn.setText("back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        viewBtn.setText("view");
        viewBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                viewBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(180, 180, 180)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(45, 45, 45)
                        .addComponent(backBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(29, 29, 29)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(viewBtn)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(layout.createSequentialGroup()
                                    .addComponent(deleteBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                    .addComponent(editBtn)
                                    .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                    .addComponent(createNewBtn)
                                    .addGap(18, 18, 18)
                                    .addComponent(sendInvitationBtn))
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(42, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 135, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(27, 27, 27)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(createNewBtn)
                    .addComponent(editBtn)
                    .addComponent(deleteBtn)
                    .addComponent(sendInvitationBtn))
                .addGap(58, 58, 58)
                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 150, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(viewBtn)
                .addGap(9, 9, 9)
                .addComponent(backBtn)
                .addContainerGap(145, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void createNewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_createNewBtnActionPerformed
        // TODO add your handling code here:
        CreateNewClinicalStudyPanel panel = new CreateNewClinicalStudyPanel(system, container);
        CardLayout layout = (CardLayout) container.getLayout();
        container.add("CreateNewClinicalStudyPanel", panel);
        layout.next(container);
    }//GEN-LAST:event_createNewBtnActionPerformed

    private void editBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_editBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = newClinicalTrialTable.getSelectedRow();
        if (selectedRow >= 0) {
            ClinicalStudy study = (ClinicalStudy) newClinicalTrialTable.getValueAt(selectedRow, 0);
            EditClinicalStudyPanel panel = new EditClinicalStudyPanel(system, container, study);
            CardLayout layout = (CardLayout) container.getLayout();
            container.add("EditClinicalStudyPanel", panel);
            layout.next(container);
        } else {
            JOptionPane.showMessageDialog(null, "Please select a row first!");
        }
    }//GEN-LAST:event_editBtnActionPerformed

    private void deleteBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_deleteBtnActionPerformed
        int selectedRow = newClinicalTrialTable.getSelectedRow();
        if (selectedRow >= 0) {
            int dialogButton = JOptionPane.YES_NO_OPTION;
            int dialogResult = JOptionPane.showConfirmDialog(null, "Would you like to delete ?", "Warning", dialogButton);
            if (dialogResult == JOptionPane.YES_OPTION) {
                ClinicalStudy clinicalStudy = (ClinicalStudy) newClinicalTrialTable.getValueAt(selectedRow, 0);
                ClinicalStudyDirectory dir = this.system.getDiseaseStudyDirectory().getDiseaseList()
                        .stream().filter(d -> clinicalStudy.getDrug().getDisease() == d)
                        .findFirst()
                        .get()
                        .getClinicalStudyDirectory();

                dir.removeNewStudy(clinicalStudy);
                populateNewClinicalStudy();
                JOptionPane.showMessageDialog(null, "New Clinical Study Request deleted succesfully");

            }

        } else {
            JOptionPane.showMessageDialog(null, "Please Select a compound request to be deleted");
        }
    }//GEN-LAST:event_deleteBtnActionPerformed

    private void sendInvitationBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sendInvitationBtnActionPerformed
        // TODO add your handling code here:
        int selectedRow = newClinicalTrialTable.getSelectedRow();
        if (selectedRow >= 0) {
            ClinicalStudy cs = (ClinicalStudy) newClinicalTrialTable.getValueAt(selectedRow, 0);
            initiateWorkRequestForPhase1(cs);
            populateNewClinicalStudy();
            populateExistingClinicalStudy();
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a compound request to be deleted");
        }

    }//GEN-LAST:event_sendInvitationBtnActionPerformed

    public void initiateWorkRequestForPhase1(ClinicalStudy cs) {
        this.system.getOrganizationDirectory()
                .getOrganizationList()
                .stream()
                .filter(o -> o.getBuType() == BusinessUnitType.MEDICARE)
                .map(m -> (Hospital) m)
                .forEach(org -> {

                    System.out.println("Organization : " +org.getEnterpriseId());
                    
                    MedicareBusiness enterprise = (MedicareBusiness) this.system.getOpRegionDirectory()
                            .getOperationalRegionList()
                            .stream()
                            .map(m -> m.getBuDir().getBusinessUnitList())
                            .flatMap(f -> f.stream())
                            .filter(fil -> fil.getUnitType() == BusinessUnitType.MEDICARE)
                            .filter(mapper -> mapper.getEnterpriseId() == org.getEnterpriseId())
                            .findFirst()
                            .get();

                    OperationalRegion op = this.system.getOpRegionDirectory().getOperationalRegionList()
                            .stream()
                            .filter(r -> r.getRegionId() == enterprise.getRegionId())
                            .findFirst()
                            .get();

                    cs.setParticipatingCandidates(100);
                    cs.setInitialDosage(2);
                    cs.setState(ClinicalState.PHASE1_STARTED);
                    SimulatePhase1ClinicalTrial simulate = new SimulatePhase1ClinicalTrial(system, container, enterprise, op, org, cs);
                    simulate.startClinicalTrialPhase1();
                    cs.setState(ClinicalState.PHASE1_COMPLETED);
                });
        boolean phase1Results = checkPhaseResults(cs, TrialPhaseType.PHASE1, 25);
        if (phase1Results) {
            startPhase2Trial(cs);
        } else {
            cs.setStudyStatus(false);
        }

    }

    private boolean checkPhaseResults(ClinicalStudy cs, TrialPhaseType phaseType, int passingScore) {
        // total phase1 trials that have been a success, if 25% of the participating
        // organization have passed, that means this drug is worth taking forward

        int filteredSize = cs.getClinicalTrialDirectory()
                .getClinicalTrialList()
                .stream()
                .filter(f -> f.getPhaseType() == phaseType
                && f.isResult()).collect(Collectors.toList()).size() * 100;

        int totalSize = cs.getClinicalTrialDirectory()
                .getClinicalTrialList()
                .stream()
                .filter(f -> f.getPhaseType() == phaseType)
                .collect(Collectors.toList()).size();

        return (filteredSize / totalSize) > passingScore;

    }

    public void startPhase2Trial(ClinicalStudy cs) {
        cs.setState(ClinicalState.PHASE2_STARTED);
        List<MedicareBusiness> enterpriseList = collectEnterprise();
        IntStream.range(0, enterpriseList.size())
                .forEach(a -> {
                    MedicareBusiness e = enterpriseList.get(a);
                    List<ClinicalPatient> patientList = e.getPatientList();
                    new SimulatePhase2Trial(patientList, system, cs, e)
                            .simlulatePhase2Trial();
                });
        cs.setState(ClinicalState.PHASE2_COMPLETED);
        boolean phase2Results = checkPhaseResults(cs, TrialPhaseType.PHASE2, 45);
        if (phase2Results) {

            startPhase3Trial(cs);
        } else {
            System.out.println("Stopping after Phase2 clinical study :" + cs.getStudyName());
            cs.setStudyStatus(false);
        }
    }

    public void startPhase3Trial(ClinicalStudy cs) {
        cs.setState(ClinicalState.PHASE3_STARTED);
        List<OperationalRegion> networkList = collectNetworks();
        IntStream.range(0, networkList.size())
                .forEach(a -> {
                    OperationalRegion n = networkList.get(a);
                    new SimulatePhase3Trial(system, n, cs).simulateTrial();
                });
        cs.setState(ClinicalState.PHASE3_COMPLETED);
        boolean phase3Results = checkPhaseResults(cs, TrialPhaseType.PHASE3, 50);
        if (phase3Results) {

            startPhase4Trial(cs);
        } else {
            System.out.println("Stopping Phase 4 study of clinical study :" + cs.getStudyName());
            cs.setStudyStatus(false);
        }
    }

    public void startPhase4Trial(ClinicalStudy cs) {
        cs.setState(ClinicalState.PHASE4_STARTED);

        List<ClinicalPatient> patientList = system.getPatientDirectory().getPatientList()
                .stream()
                .map(m -> (ClinicalPatient) m)
                .collect(Collectors.toList());

        new SimulatePhase4Trial(system, patientList, cs).simulateTrial();

        cs.setState(ClinicalState.PHASE4_COMPLETED);
        //boolean phase4Results = checkPhaseResults(cs, TrialPhaseType.PHASE4, 50)
        ClinicalTrial phase4Result = cs.getClinicalTrialDirectory().getClinicalTrialList()
                .stream()
                .filter(f -> f.getPhaseType() == TrialPhaseType.PHASE4)
                .findFirst()
                .get();
        if (phase4Result.isResult()) {
            System.out.println("Congratulations Phase 4 was a success!" + cs.getStudyName());

        } else {
            System.out.println("Drug Failed Test!" + cs.getStudyName());
            cs.setStudyStatus(false);
        }
    }

    public List<OperationalRegion> collectNetworks() {
        return this.system.getOpRegionDirectory()
                .getOperationalRegionList();
    }

    public List<MedicareBusiness> collectEnterprise() {
        return this.system.getOpRegionDirectory()
                .getOperationalRegionList()
                .stream()
                .map(m -> m.getBuDir().getBusinessUnitList())
                .flatMap(f -> f.stream())
                .filter(mapper -> mapper.getUnitType() == BusinessUnitType.MEDICARE)
                .map(k -> (MedicareBusiness) k).collect(Collectors.toList());

    }
    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:

    }//GEN-LAST:event_backBtnActionPerformed

    private void viewBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_viewBtnActionPerformed
        // TODO add your handling code here:

        int selectedRow = existingStudyTable.getSelectedRow();
        if (selectedRow >= 0) {
            ClinicalStudy cs = (ClinicalStudy) existingStudyTable.getValueAt(selectedRow, 0);
            VisualizeStudy panel = new VisualizeStudy(cs, container, system);
            CardLayout layout = (CardLayout) container.getLayout();
            container.add("VisualizeStudy", panel);
            layout.next(container);
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a compound request to be deleted");
        }
    }//GEN-LAST:event_viewBtnActionPerformed

    public void redirectUser() {

        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JButton createNewBtn;
    private javax.swing.JButton deleteBtn;
    private javax.swing.JButton editBtn;
    private javax.swing.JTable existingStudyTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JTable newClinicalTrialTable;
    private javax.swing.JButton sendInvitationBtn;
    private javax.swing.JButton viewBtn;
    // End of variables declaration//GEN-END:variables
}
