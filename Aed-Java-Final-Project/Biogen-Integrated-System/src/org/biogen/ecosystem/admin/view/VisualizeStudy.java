/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.biogen.ecosystem.admin.view;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Color;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.NavigableMap;
import java.util.TreeMap;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.biogen.business.drug.model.Item;
import org.biogen.business.drug.model.ItemStatus;
import org.biogen.business.enterprise.model.BusinessUnit;
import org.biogen.business.enterprise.model.BusinessUnitType;
import org.biogen.business.enterprise.model.MedicareBusiness;
import org.biogen.business.medicare.model.ClinicalState;
import org.biogen.business.medicare.model.ClinicalStudy;
import org.biogen.business.medicare.model.ClinicalTrial;
import org.biogen.business.medicare.model.TrialPhaseType;
import org.biogen.ecosystem.model.Ecosystem;
import org.biogen.organization.admin.chem.view.ManageNewCompoundRequestPanel;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartFrame;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.chart.plot.CategoryPlot;
import org.jfree.chart.plot.PlotOrientation;
import org.jfree.data.category.DefaultCategoryDataset;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author deveshkandpal
 */
public class VisualizeStudy extends javax.swing.JPanel {

    /**
     * Creates new form VisualizeStudy
     */
    private ClinicalStudy clinicalStudy;
    private JPanel container;
    private Ecosystem system;

    public VisualizeStudy(ClinicalStudy clinicalStudy, JPanel container, Ecosystem system) {
        initComponents();
        this.clinicalStudy = clinicalStudy;
        this.container = container;
        this.system = system;
        populateTable();
    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) clinicalStudyTrialTable.getModel();

        model.setRowCount(0);

        List<String> stringList = this.clinicalStudy.getClinicalTrialDirectory()
                .getClinicalTrialList()
                .stream()
                .map(type -> type.getPhaseType())
                .distinct()
                .map(s -> s.toString())
                .collect(Collectors.toList());

        stringList
                .stream()
                .forEach(r -> {
                    Object[] arr = new Object[1];
                    arr[0] = r;
                    model.addRow(arr);
                });

    }

    public void populateChart(Map<String, Integer> mapping) {

        DefaultCategoryDataset dataset = new DefaultCategoryDataset();

        mapping.forEach((k, v) -> {
            dataset.setValue(v, "Total Quantity", k);

        });

        JFreeChart chart = ChartFactory
                .createBarChart("Average Score vs Trial Conducting Organization",
                        " Name",
                        "Average Score", dataset,
                        PlotOrientation.VERTICAL,
                        false, true, false);
        CategoryPlot p = chart.getCategoryPlot();
        p.setRangeGridlinePaint(Color.BLACK);
        ChartPanel f = new ChartPanel(chart);
        visualizeResults.setLayout(new java.awt.BorderLayout());
        visualizeResults.removeAll();
        visualizeResults.add(f, BorderLayout.CENTER);
        visualizeResults.validate();
        visualizeResults.repaint();

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        clinicalStudyTrialTable = new javax.swing.JTable();
        visualizeResults = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Visualize Clinical Study");

        clinicalStudyTrialTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Trial Phase"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        clinicalStudyTrialTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                clinicalStudyTrialTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(clinicalStudyTrialTable);

        visualizeResults.setBorder(javax.swing.BorderFactory.createCompoundBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)), null));

        javax.swing.GroupLayout visualizeResultsLayout = new javax.swing.GroupLayout(visualizeResults);
        visualizeResults.setLayout(visualizeResultsLayout);
        visualizeResultsLayout.setHorizontalGroup(
            visualizeResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 276, Short.MAX_VALUE)
        );
        visualizeResultsLayout.setVerticalGroup(
            visualizeResultsLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 235, Short.MAX_VALUE)
        );

        backBtn.setText("back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(211, 211, 211)
                        .addComponent(jLabel1))
                    .addGroup(layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)
                        .addGap(48, 48, 48)
                        .addComponent(visualizeResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(83, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(17, 17, 17)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(backBtn)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(18, 18, 18)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 133, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(38, 38, 38)
                        .addComponent(visualizeResults, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(18, Short.MAX_VALUE))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void clinicalStudyTrialTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_clinicalStudyTrialTableMouseClicked
        // TODO add your handling code here:
        int selectedRow = clinicalStudyTrialTable.getSelectedRow();
        if (selectedRow >= 0) {
            String cs = (String) clinicalStudyTrialTable.getValueAt(selectedRow, 0);
            visualize2(cs);
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a compound request to be deleted");
        }
    }//GEN-LAST:event_clinicalStudyTrialTableMouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        Component[] componentArray = container.getComponents();
        Component component = componentArray[componentArray.length - 1];
        ManageClinicalTrialPanel previousPanel = (ManageClinicalTrialPanel) component;
        previousPanel.populateExistingClinicalStudy();
        previousPanel.populateNewClinicalStudy();
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);

    }//GEN-LAST:event_backBtnActionPerformed

    public void visualize2(String phaseType) {
        List<ClinicalTrial> phaseTrials = this.clinicalStudy
                .getClinicalTrialDirectory()
                .getClinicalTrialList()
                .stream()
                .filter(f -> f.getPhaseType().toString().equals(phaseType))
                .collect(Collectors.toList());
        Map<String, Integer> mapping = new HashMap<>();
        phaseTrials.stream()
                .forEach(a -> {

                    int orgId = a.getTrialConductingOrgId();
                    String orgName;
                    if (phaseType.equals("PHASE1")) {

                        orgName = this.system.getOrganizationDirectory().getOrganizationList()
                                .stream().filter(f -> f.getOrgId() == orgId).findFirst()
                                .get().getName();

                        int averageScore = (int) a.getAverageScore();

                        mapping.put(orgName, (int) averageScore);

                    } else if (phaseType.equals("PHASE2")) {

                        MedicareBusiness unit = this.system.getOpRegionDirectory()
                                .getOperationalRegionList()
                                .stream()
                                .map(m -> m.getBuDir().getBusinessUnitList())
                                .flatMap(f -> f.stream())
                                .filter(fil -> fil.getUnitType() == BusinessUnitType.MEDICARE
                                && fil.getEnterpriseId() == orgId)
                                .map(m2 -> (MedicareBusiness) m2)
                                .findFirst()
                                .get();

                        int enterpriseId = unit.getEnterpriseId();
                        int regionId = unit.getRegionId();

                        String regionName = this.system.getOpRegionDirectory().getOperationalRegionList()
                                .stream()
                                .filter(f -> f.getRegionId() == regionId)
                                .findFirst()
                                .get().getType().toString();

                        mapping.put(regionName + "_" + enterpriseId, (int) a.getAverageScore());

                    } else if (phaseType.equals("PHASE3")) {

                        String regionName = this.system.getOpRegionDirectory().getOperationalRegionList()
                                .stream()
                                .filter(f -> f.getRegionId() == orgId)
                                .findFirst()
                                .get().getType().toString();

                        mapping.put(regionName, (int) a.getAverageScore());
                    } else {

                        mapping.put("Ecosystem Level", (int) a.getAverageScore());

                    }

                });

        populateChart(mapping);

    }

    public void visualize(String phaseType) {

        List<ClinicalTrial> phaseTrials = this.clinicalStudy
                .getClinicalTrialDirectory()
                .getClinicalTrialList()
                .stream()
                .filter(f -> f.getPhaseType().toString().equals(phaseType))
                .collect(Collectors.toList());

        System.out.println("type : " + phaseType);
        System.out.println("list size : " + phaseTrials.size());

        Map<Double, List<ClinicalTrial>> nm = new HashMap<>();
        for (ClinicalTrial ct : phaseTrials) {

            if (!nm.isEmpty() && nm.containsKey(ct.getAverageScore())) {
                List<ClinicalTrial> val = nm.get(ct.getAverageScore());
                val.add(ct);
                nm.put(ct.getAverageScore(), val);

            } else {
                List<ClinicalTrial> val = new ArrayList<>();
                val.add(ct);
                nm.put(ct.getAverageScore(), val);
            }
        }

        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        System.out.println("nm : " + nm.size());
        nm.entrySet()
                .stream()
                .forEach(a -> {

                    Double key = a.getKey();
                    Integer val = a.getValue().size();
                    pieDataSet.setValue(key, val);

                });

        JFreeChart chart = ChartFactory.createPieChart(phaseType, pieDataSet);
        ChartPanel f = new ChartPanel(chart);

        visualizeResults.setLayout(new java.awt.BorderLayout());
        visualizeResults.removeAll();
        visualizeResults.add(f, BorderLayout.CENTER);
        visualizeResults.validate();
        visualizeResults.repaint();

    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable clinicalStudyTrialTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel visualizeResults;
    // End of variables declaration//GEN-END:variables
}
