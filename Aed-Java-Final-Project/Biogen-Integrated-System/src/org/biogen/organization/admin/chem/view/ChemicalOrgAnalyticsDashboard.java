/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.biogen.organization.admin.chem.view;

import java.awt.BorderLayout;
import java.awt.CardLayout;
import java.awt.Component;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import java.util.stream.Collectors;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.table.DefaultTableModel;
import org.biogen.business.chem.model.Compound;
import org.biogen.business.medicare.model.ClinicalTrial;
import org.biogen.organization.work.model.GetCompoundRequest;
import org.biogen.organization.work.model.WorkQueue;
import org.biogen.work.attachment.model.InventoryUpdateAttachment;
import org.jfree.chart.ChartFactory;
import org.jfree.chart.ChartPanel;
import org.jfree.chart.JFreeChart;
import org.jfree.data.general.DefaultPieDataset;

/**
 *
 * @author deveshkandpal
 */
public class ChemicalOrgAnalyticsDashboard extends javax.swing.JPanel {

    /**
     * Creates new form ChemicalOrgAnalyticsDashboard
     */
    private WorkQueue queue;
    //private List<GetCompoundRequest> compoundRequestList;
    private List<InventoryUpdateAttachment> attachList;
    private JPanel container;

    public ChemicalOrgAnalyticsDashboard(WorkQueue queue, JPanel container) {
        initComponents();
        this.queue = queue;
        this.container = container;
        populateTable();

    }

    public void populateTable() {

        DefaultTableModel model = (DefaultTableModel) compoundTable.getModel();
        model.setRowCount(0);
//
//        this.compoundRequestList = queue
//                .getWorkRequestList().stream().map(m
//                        -> (GetCompoundRequest) m)
//                .collect(Collectors.toList());

        this.attachList = this.queue
                .getWorkRequestList().stream().map(mp -> mp.getAttachment())
                .map(m -> (InventoryUpdateAttachment)m)
                .collect(Collectors.toList());

        List<Compound> distinctCompounds = attachList.stream()
                .map(mapper -> mapper.getCompound())
                .distinct()
                .collect(Collectors.toList());

        distinctCompounds.stream()
                .forEach(c -> {
                    Object[] arr = new Object[1];
                    arr[0] = c;
                    model.addRow(arr);
                });

    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jScrollPane1 = new javax.swing.JScrollPane();
        compoundTable = new javax.swing.JTable();
        visualizeContainer = new javax.swing.JPanel();
        backBtn = new javax.swing.JButton();

        setBackground(new java.awt.Color(255, 255, 255));

        compoundTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Compound Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        compoundTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                compoundTableMouseClicked(evt);
            }
        });
        jScrollPane1.setViewportView(compoundTable);

        visualizeContainer.setBackground(new java.awt.Color(255, 255, 255));
        visualizeContainer.setBorder(javax.swing.BorderFactory.createLineBorder(new java.awt.Color(0, 0, 0)));

        javax.swing.GroupLayout visualizeContainerLayout = new javax.swing.GroupLayout(visualizeContainer);
        visualizeContainer.setLayout(visualizeContainerLayout);
        visualizeContainerLayout.setHorizontalGroup(
            visualizeContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 203, Short.MAX_VALUE)
        );
        visualizeContainerLayout.setVerticalGroup(
            visualizeContainerLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 165, Short.MAX_VALUE)
        );

        backBtn.setText("back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(68, 68, 68)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 375, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(layout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(backBtn)))
                .addContainerGap(82, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                .addGap(0, 0, Short.MAX_VALUE)
                .addComponent(visualizeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(146, 146, 146))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(23, 23, 23)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 90, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 30, Short.MAX_VALUE)
                .addComponent(visualizeContainer, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(1, 1, 1)
                .addComponent(backBtn)
                .addGap(18, 18, 18))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void compoundTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_compoundTableMouseClicked
        // TODO add your handling code here:

        int selectedRow = compoundTable.getSelectedRow();
        if (selectedRow >= 0) {
            Compound cs = (Compound) compoundTable.getValueAt(selectedRow, 0);
            visualize(cs);
        } else {
            JOptionPane.showMessageDialog(null, "Please Select a compound request to be deleted");
        }


    }//GEN-LAST:event_compoundTableMouseClicked

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);
    }//GEN-LAST:event_backBtnActionPerformed

    public void visualize(Compound compound) {

        List<InventoryUpdateAttachment> filteredResults
                = this.attachList.stream().filter(p -> p.getCompound() == compound)
                        .collect(Collectors.toList());

        Map<String, Integer> sorted = new HashMap<>();
        for (InventoryUpdateAttachment attachment : filteredResults) {
            String buyerName = attachment.getItemOrder().getOrganization().getName();
            if (sorted.containsKey(buyerName)) {
                Integer eq = sorted.get(buyerName);
                Integer q = attachment.getItemOrder().getQuantity();
                sorted.put(buyerName, q + eq);
            } else {
                Integer q = attachment.getItemOrder().getQuantity();
                sorted.put(buyerName, q);
            }
        }

        DefaultPieDataset pieDataSet = new DefaultPieDataset();
        System.out.println("nm : " + sorted.size());
        sorted.entrySet()
                .stream()
                .forEach(a -> {

                    String key = a.getKey();
                    Integer val = a.getValue();
                    pieDataSet.setValue(key + " : "+val, val);

                });

        JFreeChart chart = ChartFactory.createPieChart(compound.getName(), pieDataSet);
        ChartPanel f = new ChartPanel(chart);

        visualizeContainer.setLayout(new java.awt.BorderLayout());
        visualizeContainer.removeAll();
        visualizeContainer.add(f, BorderLayout.CENTER);
        visualizeContainer.validate();
        visualizeContainer.repaint();

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable compoundTable;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel visualizeContainer;
    // End of variables declaration//GEN-END:variables
}
