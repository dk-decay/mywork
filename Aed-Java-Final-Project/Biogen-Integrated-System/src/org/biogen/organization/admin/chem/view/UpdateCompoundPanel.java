/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package org.biogen.organization.admin.chem.view;

import java.awt.CardLayout;
import java.util.Arrays;
import java.util.List;
import java.util.stream.Collectors;
import java.util.stream.IntStream;
import javax.swing.JList;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import javax.swing.ListSelectionModel;
import javax.swing.table.DefaultTableModel;
import org.biogen.business.chem.model.Compound;
import org.biogen.business.common.Status;
import org.biogen.business.enterprise.model.BusinessUnitType;
import org.biogen.ecosystem.model.Ecosystem;
import org.biogen.order.model.ChemicalSynthesisOrder;
import org.biogen.organization.model.ChemicalManufacturer;

/**
 *
 * @author deveshkandpal
 */
public class UpdateCompoundPanel extends javax.swing.JPanel {

    /**
     * Creates new form UpdateCompoundPanel
     */
    private JPanel container;
    private Ecosystem system;
    private ChemicalManufacturer organization;

    public UpdateCompoundPanel(JPanel container,
            Ecosystem system,
            ChemicalManufacturer organization) {
        initComponents();
        this.container = container;
        this.system = system;
        this.organization = organization;
        populateDropList();
    }

    public void populateDropList() {

        DefaultTableModel model = (DefaultTableModel) compoundNameTable.getModel();
        model.setRowCount(0);
        prepareListModel().stream()
                .forEach(pop -> {
                    Object[] arr = new Object[1];
                    arr[0] = pop;
                    model.addRow(arr);
                });

    }

    public List<Compound> prepareListModel() {
        return this.system.getOrganizationDirectory()
                .getOrganizationList()
                .stream()
                .filter(o -> o.getBuType() == BusinessUnitType.CHEMICAL)
                .filter(s -> s.getOrgId() != organization.getOrgId())
                .map(f -> (ChemicalManufacturer) f)
                .map(c -> c.getCompoundList())
                .flatMap(l -> l.stream())
                .filter(comp -> comp.getStatus() == Status.APPROVED)
                .collect(Collectors.toList());
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLabel1 = new javax.swing.JLabel();
        submitBtn = new javax.swing.JButton();
        backBtn = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        compoundNameTable = new javax.swing.JTable();

        setBackground(new java.awt.Color(255, 255, 255));

        jLabel1.setFont(new java.awt.Font("Lucida Grande", 1, 13)); // NOI18N
        jLabel1.setText("Update Chemical List");

        submitBtn.setText("submit");
        submitBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                submitBtnActionPerformed(evt);
            }
        });

        backBtn.setText("back");
        backBtn.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                backBtnActionPerformed(evt);
            }
        });

        compoundNameTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "Compound Name"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        jScrollPane1.setViewportView(compoundNameTable);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(63, 63, 63)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(backBtn)
                        .addGap(199, 199, 199)
                        .addComponent(submitBtn))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(81, 81, 81))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, layout.createSequentialGroup()
                        .addGap(74, 74, 74)
                        .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 264, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(151, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(29, 29, 29)
                .addComponent(jLabel1)
                .addGap(18, 18, 18)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 130, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addGap(34, 34, 34)
                        .addComponent(submitBtn)
                        .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                    .addGroup(layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 62, Short.MAX_VALUE)
                        .addComponent(backBtn)
                        .addGap(47, 47, 47))))
        );
    }// </editor-fold>//GEN-END:initComponents

    private void backBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_backBtnActionPerformed
        // TODO add your handling code here:
        redirectUser();
    }//GEN-LAST:event_backBtnActionPerformed

    private void submitBtnActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_submitBtnActionPerformed
        // TODO add your handling code here:

        int[] selectedRows = compoundNameTable
                .getSelectedRows();

        if (selectedRows.length > 0) {
            List<Compound> synthesizedList = IntStream.of(selectedRows)
                    .mapToObj(idx -> (Compound) compoundNameTable.getValueAt(idx, 0))
                    .collect(Collectors.toList());
            this.organization.getCompoundList().addAll(synthesizedList);
            JOptionPane.showMessageDialog(null, "Successfully submitted");
            redirectUser();
        } else {
            JOptionPane.showMessageDialog(null, "Please select atleast one row");
        }


    }//GEN-LAST:event_submitBtnActionPerformed

    public void redirectUser() {

        container.remove(this);
        CardLayout layout = (CardLayout) container.getLayout();
        layout.previous(container);

    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton backBtn;
    private javax.swing.JTable compoundNameTable;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JButton submitBtn;
    // End of variables declaration//GEN-END:variables
}
